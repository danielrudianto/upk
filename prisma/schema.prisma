generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model branch {
  id               Int      @id @default(autoincrement())
  name             String   @unique(map: "name_UNIQUE") @db.VarChar(45)
  description      String   @db.VarChar(45)
  is_delete        Boolean  @default(false)
  branch_parent_id Int?
  branch           branch?  @relation("branchTobranch_branch_parent_id", fields: [branch_parent_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "branch_ibfk_1")
  other_branch     branch[] @relation("branchTobranch_branch_parent_id")
  user             user[]

  @@index([branch_parent_id], map: "branch_ibfk_1_idx")
}

model comment_reaction {
  id              Int          @id @default(autoincrement())
  created_by      Int
  created_at      DateTime     @default(now()) @db.DateTime(0)
  is_delete       Boolean      @default(false)
  post_comment_id Int
  user            user         @relation(fields: [created_by], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "comment_reaction_ibfk_1")
  post_comment    post_comment @relation(fields: [post_comment_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "comment_reaction_ibfk_2")

  @@index([created_by], map: "comment_reaction_ibfk_1_idx")
  @@index([post_comment_id], map: "comment_reaction_ibfk_1_idx1")
}

model payment_method {
  id                Int                 @id @default(autoincrement())
  name              String              @unique(map: "name_UNIQUE") @db.VarChar(100)
  user_subscription user_subscription[]
  user_transaction  user_transaction[]
}

model post {
  id            Int             @id @default(autoincrement())
  created_by    Int
  created_at    DateTime        @default(now()) @db.DateTime(0)
  description   String?         @db.Text
  is_delete     Boolean         @default(false)
  user          user            @relation(fields: [created_by], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "post_ibfk_1")
  post_comment  post_comment[]
  post_reaction post_reaction[]

  @@index([created_by], map: "post_ibfk_1_idx")
}

model post_comment {
  id               Int                @id @default(autoincrement())
  user_id          Int
  comment          String             @db.Text
  created_at       DateTime           @default(now()) @db.DateTime(0)
  is_delete        Int                @default(0) @db.TinyInt
  post_id          Int?
  post             post?              @relation(fields: [post_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "post_comment_ibfk_1")
  user             user               @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "post_comment_ibfk_2")
  comment_reaction comment_reaction[]

  @@index([post_id], map: "post_comment_ibfk_1_idx")
  @@index([user_id], map: "post_comment_ibfk_2_idx")
}

model post_reaction {
  id         Int      @id @default(autoincrement())
  user_id    Int
  post_id    Int
  created_at DateTime @default(now()) @db.DateTime(0)
  is_delete  Boolean  @default(false)
  post       post     @relation(fields: [post_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "post_reaction_ibfk_1")
  user       user     @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "post_reaction_ibfk_2")

  @@index([post_id], map: "post_reaction_ibfk_1_idx")
  @@index([user_id], map: "post_reaction_ibfk_2_idx")
}

model purchase_type {
  id               Int                @id
  name             String             @db.VarChar(100)
  description      String             @db.VarChar(200)
  created_by       Int
  created_at       DateTime           @default(now()) @db.DateTime(0)
  administrator    administrator      @relation(fields: [created_by], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "purchase_type_ibfk_1")
  user_transaction user_transaction[]

  @@index([name, description], map: "purchase_type_fulltext")
  @@index([created_by], map: "purchase_type_ibfk_1_idx")
}

model user {
  id                Int                 @id @default(autoincrement())
  name              String              @db.VarChar(100)
  phone_number      String              @unique(map: "phone_number_UNIQUE") @db.VarChar(100)
  nik               String              @unique(map: "nik_UNIQUE") @db.VarChar(18)
  created_at        DateTime            @default(now()) @db.DateTime(0)
  updated_at        DateTime?           @db.DateTime(0)
  branch_id         Int
  branch            branch              @relation(fields: [branch_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "user_ibfk_1")
  comment_reaction  comment_reaction[]
  post              post[]
  post_comment      post_comment[]
  post_reaction     post_reaction[]
  user_subscription user_subscription[]
  user_token        user_token[]
  user_transaction  user_transaction[]

  @@index([branch_id], map: "user_ibfk_1_idx")
}

model user_subscription {
  id                                               Int            @id @default(autoincrement())
  user_id                                          Int
  created_at                                       DateTime       @default(now()) @db.DateTime(0)
  valid_from                                       DateTime?      @db.Date
  valid_until                                      DateTime?      @db.Date
  is_paid                                          Boolean        @default(false)
  paid_at                                          DateTime?      @db.DateTime(0)
  payment_id                                       String         @unique(map: "payment_id_UNIQUE") @db.VarChar(100)
  payment_method                                   Int
  payment_method_payment_methodTouser_subscription payment_method @relation(fields: [payment_method], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "user_subscription_ibfk_2")
  user                                             user           @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "user_subscription_ibfk_1")

  @@index([user_id], map: "user_subscription_ibfk_1_idx")
  @@index([payment_method], map: "user_subscription_ibfk_2_idx")
}

model user_token {
  id      Int    @id @default(autoincrement())
  user_id Int
  token   String @unique(map: "token_UNIQUE") @db.VarChar(100)
  user    user   @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "user_token_ibfk_1")

  @@index([user_id], map: "user_token_ibfk_1_idx")
}

model user_transaction {
  id                 Int            @id @default(autoincrement())
  created_by         Int
  created_at         DateTime?      @db.DateTime(0)
  value              Decimal        @db.Decimal(50, 4)
  service            Decimal        @db.Decimal(50, 4)
  discount           Decimal        @db.Decimal(50, 4)
  purchase_type_id   Int?
  payment_id         String         @unique(map: "payment_id_UNIQUE") @db.VarChar(100)
  payment_method_id  Int
  is_paid            Boolean?       @default(false)
  is_delete          Boolean?       @default(false)
  paid_at            DateTime?      @db.DateTime(0)
  branch_transaction Boolean?       @default(false)
  payment_reference  String?        @unique(map: "payment_reference_UNIQUE") @db.VarChar(50)
  purchase_reference String         @db.VarChar(100)
  note               String?        @db.VarChar(200)
  user               user           @relation(fields: [created_by], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "user_transaction_ibfk_1")
  payment_method     payment_method @relation(fields: [payment_method_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "user_transaction_ibfk_3")
  purchase_type      purchase_type? @relation(fields: [purchase_type_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "user_transaction_ibfk_2")

  @@index([created_by], map: "user_transaction_ibfk_1_idx")
  @@index([purchase_type_id], map: "user_transaction_ibfk_2_idx")
  @@index([payment_method_id], map: "user_transaction_ibfk_3_idx")
  @@index([note, purchase_reference], map: "user_transaction_fulltext")
}

model administrator {
  id            Int             @id @default(autoincrement())
  name          String          @db.VarChar(45)
  nik           String          @unique(map: "nik_UNIQUE") @db.VarChar(45)
  phone_number  String          @db.VarChar(45)
  is_active     Boolean
  purchase_type purchase_type[]
}
